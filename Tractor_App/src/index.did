service: () -> {
    addFarmer: (record {farmer_lname:text; farmernatid:nat64; farmer_fname:text; phonenumber:nat64; location:text}) -> (variant {Ok:record {farmer_lname:text; farmernatid:nat64; farmerid:text; createdAt:nat64; updatedAt:opt nat64; farmer_fname:text; phonenumber:nat64; location:text}; Err:variant {InvalidPayload:text; NotFound:text}});
    addService: (record {farmerid:text; tractorid:text; SizeofLand:nat64; ServiceType:variant {cropPlanting:text; cropHarvesting:text}}) -> (variant {Ok:record {farmerid:text; Serviceid:nat64; tractorid:text; SizeofLand:nat64; ServiceType:variant {cropPlanting:text; cropHarvesting:text}}; Err:variant {InvalidPayload:text; NotFound:text}});
    addTractor: (record {tractorModel:text; tractorbrand:nat64}) -> (variant {Ok:record {status:bool; createdAt:nat64; tractorId:nat64; updatedAt:opt nat64; tractorModel:text; tractorbrand:nat64}; Err:variant {InvalidPayload:text; NotFound:text}});
    deleteFarmer: (text) -> (variant {Ok:record {farmer_lname:text; farmernatid:nat64; farmerid:text; createdAt:nat64; updatedAt:opt nat64; farmer_fname:text; phonenumber:nat64; location:text}; Err:variant {InvalidPayload:text; NotFound:text}});
    deleteTractor: (nat64) -> (variant {Ok:record {farmer_lname:text; farmernatid:nat64; farmerid:text; createdAt:nat64; updatedAt:opt nat64; farmer_fname:text; phonenumber:nat64; location:text}; Err:variant {InvalidPayload:text; NotFound:text}});
    getFarmer: () -> (variant {Ok:vec record {farmer_lname:text; farmernatid:nat64; farmerid:text; createdAt:nat64; updatedAt:opt nat64; farmer_fname:text; phonenumber:nat64; location:text}; Err:variant {InvalidPayload:text; NotFound:text}}) query;
    getService: () -> (variant {Ok:vec record {farmerid:text; Serviceid:nat64; tractorid:text; SizeofLand:nat64; ServiceType:variant {cropPlanting:text; cropHarvesting:text}}; Err:variant {InvalidPayload:text; NotFound:text}}) query;
    getTractor: () -> (variant {Ok:vec record {status:bool; createdAt:nat64; tractorId:nat64; updatedAt:opt nat64; tractorModel:text; tractorbrand:nat64}; Err:variant {InvalidPayload:text; NotFound:text}}) query;
    getspecificFarmer: (text) -> (variant {Ok:record {farmer_lname:text; farmernatid:nat64; farmerid:text; createdAt:nat64; updatedAt:opt nat64; farmer_fname:text; phonenumber:nat64; location:text}; Err:variant {InvalidPayload:text; NotFound:text}}) query;
    getspecificService: (nat64) -> (variant {Ok:record {farmerid:text; Serviceid:nat64; tractorid:text; SizeofLand:nat64; ServiceType:variant {cropPlanting:text; cropHarvesting:text}}; Err:variant {InvalidPayload:text; NotFound:text}}) query;
    getspecificTractor: (nat64) -> (variant {Ok:record {status:bool; createdAt:nat64; tractorId:nat64; updatedAt:opt nat64; tractorModel:text; tractorbrand:nat64}; Err:variant {InvalidPayload:text; NotFound:text}}) query;
    updateFarmer: (text, record {farmer_lname:text; farmernatid:nat64; farmer_fname:text; phonenumber:nat64; location:text}) -> (variant {Ok:record {farmer_lname:text; farmernatid:nat64; farmerid:text; createdAt:nat64; updatedAt:opt nat64; farmer_fname:text; phonenumber:nat64; location:text}; Err:variant {InvalidPayload:text; NotFound:text}});
    updateTractor: (nat64, record {tractorModel:text; tractorbrand:nat64}) -> (variant {Ok:record {farmer_lname:text; farmernatid:nat64; farmerid:text; createdAt:nat64; updatedAt:opt nat64; farmer_fname:text; phonenumber:nat64; location:text}; Err:variant {InvalidPayload:text; NotFound:text}});
}
